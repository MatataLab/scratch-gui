{"version":3,"file":"chunks/gui.js","sources":["webpack://GUI/./src/playground/index.css","webpack://GUI/./src/lib/scratch-extends/scratch-blocks/field_face.js","webpack://GUI/./src/lib/scratch-extends/util.js","webpack://GUI/./src/playground/index.css?5c54","webpack://GUI/./src/playground/index.jsx","webpack://GUI/./src/playground/render-gui.jsx","webpack://GUI/./locale-data/complete.js (ignored)"],"sourcesContent":["exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"html,\\nbody,\\n.index_app_2mqDO {\\n    /* probably unecessary, transitional until layout is refactored */\\n    width: 100%; \\n    height: 100%;\\n    margin: 0;\\n\\n    /* Setting min height/width makes the UI scroll below those sizes */\\n    min-width: 1024px;\\n    min-height: 640px; /* Min height to fit sprite/backdrop button */\\n}\\n\\n/* @todo: move globally? Safe / side FX, for blocks particularly? */\\n\\n* { -webkit-box-sizing: border-box; box-sizing: border-box; }\\n\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"app\": \"index_app_2mqDO\"\n};","/* eslint-disable no-mixed-operators */\n/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview 5x5 matrix input field.\n * Displays an editable 5x5 matrix for controlling LED arrays.\n * @author khanning@gmail.com (Kreg Hanning)\n */\n\nimport Blockly from 'scratch-blocks';\nimport {googInherits} from '../util';\n\n/**\n * Class for a matrix field.\n * @param {number} matrix The default matrix value represented by a 25-bit integer.\n * @extends {Blockly.Field}\n * @constructor\n */\nBlockly.FieldFace = function (matrix) {\n    Blockly.FieldFace.superClass_.constructor.call(this, matrix);\n    this.addArgType('matrix');\n    /**\n     * Array of SVGElement<rect> for matrix thumbnail image on block field.\n     * @type {!Array<SVGElement>}\n     * @private\n     */\n    this.ledThumbNodes_ = [];\n    /**\n     * Array of SVGElement<rect> for matrix editor in dropdown menu.\n     * @type {!Array<SVGElement>}\n     * @private\n     */\n    this.ledButtons_ = [];\n    /**\n     * String for storing current matrix value.\n     * @type {!String]\n     * @private\n     */\n    this.matrix_ = '';\n    /**\n     * SVGElement for LED matrix in editor.\n     * @type {?SVGElement}\n     * @private\n     */\n    this.matrixStage_ = null;\n    /**\n     * SVG image for dropdown arrow.\n     * @type {?SVGElement}\n     * @private\n     */\n    this.arrow_ = null;\n    /**\n     * String indicating matrix paint style.\n     * value can be [null, 'fill', 'clear'].\n     * @type {?String}\n     * @private\n     */\n    this.paintStyle_ = null;\n    /**\n     * Touch event wrapper.\n     * Runs when the field is selected.\n     * @type {!Array}\n     * @private\n     */\n    this.mouseDownWrapper_ = null;\n    /**\n     * Touch event wrapper.\n     * Runs when the clear button editor button is selected.\n     * @type {!Array}\n     * @private\n     */\n    this.clearButtonWrapper_ = null;\n    /**\n     * Touch event wrapper.\n     * Runs when the fill button editor button is selected.\n     * @type {!Array}\n     * @private\n     */\n    this.fillButtonWrapper_ = null;\n    /**\n     * Touch event wrapper.\n     * Runs when the matrix editor is touched.\n     * @type {!Array}\n     * @private\n     */\n    this.matrixTouchWrapper_ = null;\n    /**\n     * Touch event wrapper.\n     * Runs when the matrix editor touch event moves.\n     * @type {!Array}\n     * @private\n     */\n    this.matrixMoveWrapper_ = null;\n    /**\n     * Touch event wrapper.\n     * Runs when the matrix editor is released.\n     * @type {!Array}\n     * @private\n     */\n    this.matrixReleaseWrapper_ = null;\n};\ngoogInherits(Blockly.FieldFace, Blockly.Field);\n\n/**\n * Construct a FieldFace from a JSON arg object.\n * @param {!object} options A JSON object with options (matrix).\n * @returns {!Blockly.FieldFace} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldFace.fromJson = function (options) {\n    return new Blockly.FieldFace(options.face);\n};\n\n/**\n * Fixed size of the matrix thumbnail in the input field, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.THUMBNAIL_SIZE = 26;\n\n/**\n * Fixed size of each matrix thumbnail node, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.THUMBNAIL_NODE_SIZE = 4;\n\n/**\n * Fixed size of each matrix thumbnail node, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.THUMBNAIL_NODE_PAD = 1;\n\n/**\n * Fixed size of arrow icon in drop down menu, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.ARROW_SIZE = 12;\n\n/**\n * Fixed size of each button inside the 5x5 matrix, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.MATRIX_NODE_SIZE = 18;\n\n/**\n * Fixed corner radius for 5x5 matrix buttons, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.MATRIX_NODE_RADIUS = 4;\n\n/**\n * Fixed padding for 5x5 matrix buttons, in px.\n * @type {number}\n * @const\n */\nBlockly.FieldFace.MATRIX_NODE_PAD = 5;\n\n/**\n * String with 25 '0' chars.\n * Used for clearing a matrix or filling an LED node array.\n * @type {string}\n * @const\n */\nBlockly.FieldFace.ZEROS = '0000000000000000000000000';\n\n/**\n * String with 25 '1' chars.\n * Used for filling a matrix.\n * @type {string}\n * @const\n */\nBlockly.FieldFace.ONES = '1111111111111111111111111';\n\nconst disableLedIndexs = [0, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 20, 24];\n\nconst subMatrix = function (initValue) {\n    if (typeof initValue === 'string') {\n        initValue = initValue.split('');\n    }\n    let value = initValue;\n    if (initValue.length === 25) {\n        value = initValue.filter((v, i) => !disableLedIndexs.includes(i)).join('');\n    }\n    return value;\n};\n\nconst addMatrix = function (initValue) {\n    let value = initValue;\n    if (initValue.length === 12) {\n        disableLedIndexs.forEach(d => {\n            value = `${value.slice(0, d)}0${value.slice(d)}`;\n        });\n    }\n    return value;\n};\n\n/**\n * Called when the field is placed on a block.\n * @param {Block} block The owning block.\n */\nBlockly.FieldFace.prototype.init = function () {\n    if (this.fieldGroup_) {\n        // Matrix menu has already been initialized once.\n        return;\n    }\n\n    // Build the DOM.\n    this.fieldGroup_ = Blockly.utils.createSvgElement('g', {}, null);\n    this.size_.width =\n        Blockly.FieldFace.THUMBNAIL_SIZE +\n        Blockly.FieldFace.ARROW_SIZE +\n        Blockly.BlockSvg.DROPDOWN_ARROW_PADDING * 1.5;\n\n    this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);\n\n    const thumbX = Blockly.BlockSvg.DROPDOWN_ARROW_PADDING / 2;\n    const thumbY = (this.size_.height - Blockly.FieldFace.THUMBNAIL_SIZE) / 2;\n    const thumbnail = Blockly.utils.createSvgElement(\n        'g',\n        {\n            'transform': `translate(${thumbX}, ${thumbY})`,\n            'pointer-events': 'bounding-box',\n            'cursor': 'pointer'\n        },\n        this.fieldGroup_\n    );\n    this.ledThumbNodes_ = [];\n    const nodeSize = Blockly.FieldFace.THUMBNAIL_NODE_SIZE;\n    const nodePad = Blockly.FieldFace.THUMBNAIL_NODE_PAD;\n    for (let i = 0; i < 5; i++) {\n        for (let n = 0; n < 5; n++) {\n            const attr = {\n                x: (nodeSize + nodePad) * n + nodePad,\n                y: (nodeSize + nodePad) * i + nodePad,\n                width: nodeSize,\n                height: nodeSize,\n                rx: nodePad,\n                ry: nodePad\n            };\n            this.ledThumbNodes_.push(\n                Blockly.utils.createSvgElement('rect', attr, thumbnail)\n            );\n        }\n        thumbnail.style.cursor = 'default';\n        this.updateMatrix_();\n    }\n\n    if (!this.arrow_) {\n        const arrowX =\n            Blockly.FieldFace.THUMBNAIL_SIZE +\n            Blockly.BlockSvg.DROPDOWN_ARROW_PADDING * 1.5;\n        const arrowY = (this.size_.height - Blockly.FieldFace.ARROW_SIZE) / 2;\n        this.arrow_ = Blockly.utils.createSvgElement(\n            'image',\n            {\n                height: `${Blockly.FieldFace.ARROW_SIZE}px`,\n                width: `${Blockly.FieldFace.ARROW_SIZE}px`,\n                transform: `translate(${arrowX}, ${arrowY})`\n            },\n            this.fieldGroup_\n        );\n        this.arrow_.setAttributeNS(\n            'http://www.w3.org/1999/xlink',\n            'xlink:href',\n            `${Blockly.mainWorkspace.options.pathToMedia}dropdown-arrow.svg`\n        );\n        this.arrow_.style.cursor = 'default';\n    }\n\n    this.mouseDownWrapper_ = Blockly.bindEventWithChecks_(\n        this.getClickTarget_(),\n        'mousedown',\n        this,\n        this.onMouseDown_\n    );\n};\n\n/**\n * Set the value for this matrix menu.\n * @param {string} matrix The new matrix value represented by a 25-bit integer.\n * @override\n */\nBlockly.FieldFace.prototype.setValue = function (matrix) {\n    if (!matrix || matrix === this.matrix_) {\n        return; // No change\n    }\n    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {\n        Blockly.Events.fire(\n            new Blockly.Events.Change(\n                this.sourceBlock_,\n                'field',\n                this.name,\n                subMatrix(this.matrix_),\n                subMatrix(matrix)\n            )\n        );\n    }\n    matrix = addMatrix(matrix);\n    this.matrix_ = matrix;\n    this.updateMatrix_();\n};\n\n/**\n * Get the value from this matrix menu.\n * @return {string} Current matrix value.\n */\nBlockly.FieldFace.prototype.getValue = function () {\n    return String(subMatrix(this.matrix_));\n};\n\n/**\n * Show the drop-down menu for editing this field.\n * @private\n */\nBlockly.FieldFace.prototype.showEditor_ = function () {\n    // If there is an existing drop-down someone else owns, hide it immediately and clear it.\n    Blockly.DropDownDiv.hideWithoutAnimation();\n    Blockly.DropDownDiv.clearContent();\n    const div = Blockly.DropDownDiv.getContentDiv();\n    // Build the SVG DOM.\n    const matrixSize =\n        Blockly.FieldFace.MATRIX_NODE_SIZE * 5 +\n        Blockly.FieldFace.MATRIX_NODE_PAD * 6;\n    this.matrixStage_ = Blockly.utils.createSvgElement(\n        'svg',\n        {\n            'xmlns': 'http://www.w3.org/2000/svg',\n            'xmlns:html': 'http://www.w3.org/1999/xhtml',\n            'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n            'version': '1.1',\n            'height': `${matrixSize}px`,\n            'width': `${matrixSize}px`\n        },\n        div\n    );\n    // Create the 5x5 matrix\n    this.ledButtons_ = [];\n    for (let i = 0; i < 5; i++) {\n        for (let n = 0; n < 5; n++) {\n            const x =\n                Blockly.FieldFace.MATRIX_NODE_SIZE * n +\n                Blockly.FieldFace.MATRIX_NODE_PAD * (n + 1);\n            const y =\n                Blockly.FieldFace.MATRIX_NODE_SIZE * i +\n                Blockly.FieldFace.MATRIX_NODE_PAD * (i + 1);\n            const attr = {\n                x: `${x}px`,\n                y: `${y}px`,\n                width: Blockly.FieldFace.MATRIX_NODE_SIZE,\n                height: Blockly.FieldFace.MATRIX_NODE_SIZE,\n                rx: Blockly.FieldFace.MATRIX_NODE_RADIUS,\n                ry: Blockly.FieldFace.MATRIX_NODE_RADIUS\n            };\n            const led = Blockly.utils.createSvgElement(\n                'rect',\n                attr,\n                this.matrixStage_\n            );\n            this.matrixStage_.appendChild(led);\n            this.ledButtons_.push(led);\n        }\n    }\n    // Div for lower button menu\n    const buttonDiv = document.createElement('div');\n    // Button to clear matrix\n    const clearButtonDiv = document.createElement('div');\n    clearButtonDiv.className = 'scratchMatrixButtonDiv';\n    const clearButton = this.createButton_(this.sourceBlock_.colourSecondary_);\n    clearButtonDiv.appendChild(clearButton);\n    // Button to fill matrix\n    const fillButtonDiv = document.createElement('div');\n    fillButtonDiv.className = 'scratchMatrixButtonDiv';\n    const fillButton = this.createButton_('#FFFFFF');\n    fillButtonDiv.appendChild(fillButton);\n\n    buttonDiv.appendChild(clearButtonDiv);\n    buttonDiv.appendChild(fillButtonDiv);\n    div.appendChild(buttonDiv);\n\n    Blockly.DropDownDiv.setColour(\n        this.sourceBlock_.getColour(),\n        this.sourceBlock_.getColourTertiary()\n    );\n    Blockly.DropDownDiv.setCategory(this.sourceBlock_.getCategory());\n    Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_);\n\n    this.matrixTouchWrapper_ = Blockly.bindEvent_(\n        this.matrixStage_,\n        'mousedown',\n        this,\n        this.onMouseDown\n    );\n    this.clearButtonWrapper_ = Blockly.bindEvent_(\n        clearButton,\n        'click',\n        this,\n        this.clearMatrix_\n    );\n    this.fillButtonWrapper_ = Blockly.bindEvent_(\n        fillButton,\n        'click',\n        this,\n        this.fillMatrix_\n    );\n\n    // Update the matrix for the current value\n    this.updateMatrix_();\n};\n\n// this.nodeCallback_ = function(e, num) {\n//   console.log(num);\n// };\n\n/**\n * Make an svg object that resembles a 3x3 matrix to be used as a button.\n * @param {string} fill The color to fill the matrix nodes.\n * @return {SvgElement} The button svg element.\n */\nBlockly.FieldFace.prototype.createButton_ = function (fill) {\n    const button = Blockly.utils.createSvgElement('svg', {\n        'xmlns': 'http://www.w3.org/2000/svg',\n        'xmlns:html': 'http://www.w3.org/1999/xhtml',\n        'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n        'version': '1.1',\n        'height': `${Blockly.FieldFace.MATRIX_NODE_SIZE}px`,\n        'width': `${Blockly.FieldFace.MATRIX_NODE_SIZE}px`\n    });\n    const nodeSize = Blockly.FieldFace.MATRIX_NODE_SIZE / 4;\n    const nodePad = Blockly.FieldFace.MATRIX_NODE_SIZE / 16;\n    for (let i = 0; i < 3; i++) {\n        for (let n = 0; n < 3; n++) {\n            Blockly.utils.createSvgElement(\n                'rect',\n                {\n                    x: (nodeSize + nodePad) * n + nodePad,\n                    y: (nodeSize + nodePad) * i + nodePad,\n                    width: nodeSize,\n                    height: nodeSize,\n                    rx: nodePad,\n                    ry: nodePad,\n                    fill: fill\n                },\n                button\n            );\n        }\n    }\n    return button;\n};\n\n/**\n * Redraw the matrix with the current value.\n * @private\n */\nBlockly.FieldFace.prototype.updateMatrix_ = function () {\n    for (let i = 0; i < this.matrix_.length; i++) {\n        if (disableLedIndexs.includes(i)) {\n            this.opacityMatrixNode_(this.ledButtons_, i, '0');\n            this.opacityMatrixNode_(this.ledThumbNodes_, i, '0');\n        } else {\n            // eslint-disable-next-line no-lonely-if\n            if (this.matrix_[i] === '0') {\n                this.fillMatrixNode_(\n                    this.ledButtons_,\n                    i,\n                    this.sourceBlock_.colourSecondary_\n                );\n                this.fillMatrixNode_(\n                    this.ledThumbNodes_,\n                    i,\n                    this.sourceBlock_.colour_\n                );\n            } else {\n                this.fillMatrixNode_(this.ledButtons_, i, '#FFFFFF');\n                this.fillMatrixNode_(this.ledThumbNodes_, i, '#FFFFFF');\n            }\n        }\n    }\n};\n\n/**\n * Clear the matrix.\n * @param {!Event} e Mouse event.\n */\nBlockly.FieldFace.prototype.clearMatrix_ = function (e) {\n    if (e.button !== 0) return;\n    this.setValue(Blockly.FieldFace.ZEROS);\n};\n\n/**\n * Fill the matrix.\n * @param {!Event} e Mouse event.\n */\nBlockly.FieldFace.prototype.fillMatrix_ = function (e) {\n    if (e.button !== 0) return;\n    this.setValue(Blockly.FieldFace.ONES);\n};\n\n/**\n * Fill matrix node with specified colour.\n * @param {!Array<SVGElement>} node The array of matrix nodes.\n * @param {!number} index The index of the matrix node.\n * @param {!string} fill The fill colour in '#rrggbb' format.\n */\nBlockly.FieldFace.prototype.fillMatrixNode_ = function (node, index, fill) {\n    if (!node || !node[index] || !fill) return;\n    node[index].setAttribute('fill', fill);\n};\n\n/**\n * Fill matrix node with specified opacity.\n * @param {!Array<SVGElement>} node The array of matrix nodes.\n * @param {!number} index The index of the matrix node.\n * @param {!string} opacity The opacity colour in '' format.\n */\nBlockly.FieldFace.prototype.opacityMatrixNode_ = function (node, index, opacity) {\n    if (!node || !node[index] || !opacity) return;\n    node[index].setAttribute('opacity', opacity);\n};\n\nBlockly.FieldFace.prototype.setLEDNode_ = function (led, state) {\n    if (led < 0 || led > 24 || disableLedIndexs.includes(led)) return;\n    const matrix =\n        this.matrix_.substr(0, led) + state + this.matrix_.substr(led + 1);\n    this.setValue(matrix);\n};\n\nBlockly.FieldFace.prototype.fillLEDNode_ = function (led) {\n    if (led < 0 || led > 24 || disableLedIndexs.includes(led)) return;\n    this.setLEDNode_(led, '1');\n};\n\nBlockly.FieldFace.prototype.clearLEDNode_ = function (led) {\n    if (led < 0 || led > 24 || disableLedIndexs.includes(led)) return;\n    this.setLEDNode_(led, '0');\n};\n\nBlockly.FieldFace.prototype.toggleLEDNode_ = function (led) {\n    if (led < 0 || led > 24 || disableLedIndexs.includes(led)) return;\n    if (this.matrix_.charAt(led) === '0') {\n        this.setLEDNode_(led, '1');\n    } else {\n        this.setLEDNode_(led, '0');\n    }\n};\n\n/**\n * Toggle matrix nodes on and off.\n * @param {!Event} e Mouse event.\n */\nBlockly.FieldFace.prototype.onMouseDown = function (e) {\n    this.matrixMoveWrapper_ = Blockly.bindEvent_(\n        document.body,\n        'mousemove',\n        this,\n        this.onMouseMove\n    );\n    this.matrixReleaseWrapper_ = Blockly.bindEvent_(\n        document.body,\n        'mouseup',\n        this,\n        this.onMouseUp\n    );\n    const ledHit = this.checkForLED_(e);\n    if (ledHit > -1) {\n        if (this.matrix_.charAt(ledHit) === '0') {\n            this.paintStyle_ = 'fill';\n        } else {\n            this.paintStyle_ = 'clear';\n        }\n        this.toggleLEDNode_(ledHit);\n        this.updateMatrix_();\n    } else {\n        this.paintStyle_ = null;\n    }\n};\n\n/**\n * Unbind mouse move event and clear the paint style.\n * @param {!Event} e Mouse move event.\n */\nBlockly.FieldFace.prototype.onMouseUp = function () {\n    Blockly.unbindEvent_(this.matrixMoveWrapper_);\n    Blockly.unbindEvent_(this.matrixReleaseWrapper_);\n    this.paintStyle_ = null;\n};\n\n/**\n * Toggle matrix nodes on and off by dragging mouse.\n * @param {!Event} e Mouse move event.\n */\nBlockly.FieldFace.prototype.onMouseMove = function (e) {\n    e.preventDefault();\n    if (this.paintStyle_) {\n        const led = this.checkForLED_(e);\n        if (led < 0) return;\n        if (this.paintStyle_ === 'clear') {\n            this.clearLEDNode_(led);\n        } else if (this.paintStyle_ === 'fill') {\n            this.fillLEDNode_(led);\n        }\n    }\n};\n\n/**\n * Check if mouse coordinates collide with a matrix node.\n * @param {!Event} e Mouse move event.\n * @return {number} The matching matrix node or -1 for none.\n */\nBlockly.FieldFace.prototype.checkForLED_ = function (e) {\n    const bBox = this.matrixStage_.getBoundingClientRect();\n    const nodeSize = Blockly.FieldFace.MATRIX_NODE_SIZE;\n    const nodePad = Blockly.FieldFace.MATRIX_NODE_PAD;\n    const dx = e.clientX - bBox.left;\n    const dy = e.clientY - bBox.top;\n    const min = nodePad / 2;\n    const max = bBox.width - nodePad / 2;\n    if (dx < min || dx > max || dy < min || dy > max) {\n        return -1;\n    }\n    const xDiv = Math.trunc((dx - nodePad / 2) / (nodeSize + nodePad));\n    const yDiv = Math.trunc((dy - nodePad / 2) / (nodeSize + nodePad));\n    return xDiv + yDiv * nodePad;\n};\n\n/**\n * Clean up this FieldFace, as well as the inherited Field.\n * @return {!Function} Closure to call on destruction of the WidgetDiv.\n * @private\n */\nBlockly.FieldFace.prototype.dispose_ = function () {\n    const thisField = this;\n    return function () {\n        Blockly.FieldFace.superClass_.dispose_.call(thisField)();\n        thisField.matrixStage_ = null;\n        if (thisField.mouseDownWrapper_) {\n            Blockly.unbindEvent_(thisField.mouseDownWrapper_);\n        }\n        if (thisField.matrixTouchWrapper_) {\n            Blockly.unbindEvent_(thisField.matrixTouchWrapper_);\n        }\n        if (thisField.matrixReleaseWrapper_) {\n            Blockly.unbindEvent_(thisField.matrixReleaseWrapper_);\n        }\n        if (thisField.matrixMoveWrapper_) {\n            Blockly.unbindEvent_(thisField.matrixMoveWrapper_);\n        }\n        if (thisField.clearButtonWrapper_) {\n            Blockly.unbindEvent_(thisField.clearButtonWrapper_);\n        }\n        if (thisField.fillButtonWrapper_) {\n            Blockly.unbindEvent_(thisField.fillButtonWrapper_);\n        }\n    };\n};\n\nBlockly.Field.register('field_face', Blockly.FieldFace);\n\nBlockly.Blocks.face = {\n    /**\n     * Block for matrix value.\n     * @this Blockly.Block\n     */\n    init: function () {\n        this.jsonInit({\n            message0: '%1',\n            args0: [\n                {\n                    type: 'field_face',\n                    name: 'FACE'\n                }\n            ],\n            outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n            output: 'Number',\n            extensions: ['colours_pen']\n        });\n    }\n};\n","const googInherits = function (childCtor, parentCtor) {\n    /** @constructor */\n    function tempCtor() {}\n    tempCtor.prototype = parentCtor.prototype;\n    childCtor.superClass_ = parentCtor.prototype;\n    childCtor.prototype = new tempCtor();\n    /** @override */\n    childCtor.prototype.constructor = childCtor;\n\n    childCtor.base = function (me, methodName, var_args) {\n        // Copying using loop to avoid deop due to passing arguments object to\n        // function. This is faster in many JS engines as of late 2014.\n        var args = new Array(arguments.length - 2);\n        for (var i = 2; i < arguments.length; i++) {\n            args[i - 2] = arguments[i];\n        }\n        return parentCtor.prototype[methodName].apply(me, args);\n    };\n};\n\nexport {\n    googInherits\n};\n","\nvar content = require(\"!!../../node_modules/css-loader/index.js??ref--5-1!../../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js??ref--5-1!../../node_modules/postcss-loader/src/index.js??postcss!./index.css\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js??ref--5-1!../../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Polyfills\nimport 'es6-object-assign/auto';\nimport 'core-js/fn/array/includes';\nimport 'core-js/fn/promise/finally';\nimport 'intl'; // For Safari 9\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport analytics from '../lib/analytics';\nimport AppStateHOC from '../lib/app-state-hoc.jsx';\nimport BrowserModalComponent from '../components/browser-modal/browser-modal.jsx';\nimport supportedBrowser from '../lib/supported-browser';\n\nimport styles from './index.css';\n\n// Register \"base\" page view\nanalytics.pageview('/');\n\nconst appTarget = document.createElement('div');\nappTarget.className = styles.app;\ndocument.body.appendChild(appTarget);\n\nif (supportedBrowser()) {\n    // require needed here to avoid importing unsupported browser-crashing code\n    // at the top level\n    require('./render-gui.jsx').default(appTarget);\n    require('../lib/scratch-extends/scratch-blocks/field_face');\n\n} else {\n    BrowserModalComponent.setAppElement(appTarget);\n    const WrappedBrowserModalComponent = AppStateHOC(BrowserModalComponent, true /* localesOnly */);\n    const handleBack = () => {};\n    // eslint-disable-next-line react/jsx-no-bind\n    ReactDOM.render(<WrappedBrowserModalComponent onBack={handleBack} />, appTarget);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {compose} from 'redux';\n\nimport AppStateHOC from '../lib/app-state-hoc.jsx';\nimport GUI from '../containers/gui.jsx';\nimport HashParserHOC from '../lib/hash-parser-hoc.jsx';\nimport log from '../lib/log.js';\n\nconst onClickLogo = () => {\n    window.location = 'https://matatalab.com';\n};\n\nconst handleTelemetryModalCancel = () => {\n    log('User canceled telemetry modal');\n};\n\nconst handleTelemetryModalOptIn = () => {\n    log('User opted into telemetry');\n};\n\nconst handleTelemetryModalOptOut = () => {\n    log('User opted out of telemetry');\n};\n\n/*\n * Render the GUI playground. This is a separate function because importing anything\n * that instantiates the VM causes unsupported browsers to crash\n * {object} appTarget - the DOM element to render to\n */\nexport default appTarget => {\n    GUI.setAppElement(appTarget);\n\n    // note that redux's 'compose' function is just being used as a general utility to make\n    // the hierarchy of HOC constructor calls clearer here; it has nothing to do with redux's\n    // ability to compose reducers.\n    const WrappedGui = compose(\n        AppStateHOC,\n        HashParserHOC\n    )(GUI);\n\n    // TODO a hack for testing the backpack, allow backpack host to be set by url param\n    const backpackHostMatches = window.location.href.match(/[?&]backpack_host=([^&]*)&?/);\n    const backpackHost = backpackHostMatches ? backpackHostMatches[1] : null;\n\n    const scratchDesktopMatches = window.location.href.match(/[?&]isScratchDesktop=([^&]+)/);\n    let simulateScratchDesktop;\n    if (scratchDesktopMatches) {\n        try {\n            // parse 'true' into `true`, 'false' into `false`, etc.\n            simulateScratchDesktop = JSON.parse(scratchDesktopMatches[1]);\n        } catch {\n            // it's not JSON so just use the string\n            // note that a typo like \"falsy\" will be treated as true\n            simulateScratchDesktop = scratchDesktopMatches[1];\n        }\n    }\n\n    if (process.env.NODE_ENV === 'production' && typeof window === 'object') {\n        // Warn before navigating away\n        window.onbeforeunload = () => true;\n    }\n\n    ReactDOM.render(\n        // important: this is checking whether `simulateScratchDesktop` is truthy, not just defined!\n        simulateScratchDesktop ?\n            <WrappedGui\n                canEditTitle\n                isScratchDesktop\n                showTelemetryModal\n                canSave={false}\n                onTelemetryModalCancel={handleTelemetryModalCancel}\n                onTelemetryModalOptIn={handleTelemetryModalOptIn}\n                onTelemetryModalOptOut={handleTelemetryModalOptOut}\n            /> :\n            <WrappedGui\n                canEditTitle\n                backpackVisible\n                showComingSoon\n                backpackHost={backpackHost}\n                canSave={false}\n                onClickLogo={onClickLogo}\n            />,\n        appTarget);\n};\n","/* (ignored) */"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;AAMA;AACA;AAEA;;;;;;;AAMA;AACA;AACA;AACA;;;;;;AAKA;AACA;;;;;;AAKA;AACA;;;;;;AAKA;AACA;;;;;;AAKA;AACA;;;;;;AAKA;AACA;;;;;;;AAMA;AACA;;;;;;;AAMA;AACA;;;;;;;AAMA;AACA;;;;;;;AAMA;AACA;;;;;;;AAMA;AACA;;;;;;;AAMA;AACA;;;;;;;AAMA;AACA;AACA;AAAA;AAEA;;;;;;;;AAOA;AACA;AACA;AAEA;;;;;;;AAKA;AAEA;;;;;;AAKA;AAEA;;;;;;AAKA;AAEA;;;;;;AAKA;AAEA;;;;;;AAKA;AAEA;;;;;;AAKA;AAEA;;;;;;AAKA;AAEA;;;;;;;AAMA;AAEA;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAHA;AAOA;AAKA;AACA;AACA;AACA;AAMA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AASA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAUA;AACA;AAAA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AAMA;AAMA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;AAAA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAMA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAVA;AAYA;AAlBA;;;;;;;;;;;;ACzqBA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;;;;;;;;;;ACpFA;;;;A","sourceRoot":""}